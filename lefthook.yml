pre-commit:
  parallel: true
  commands:
    # Rust フォーマット
    rust-fmt:
      glob: 'backend/**/*.rs'
      run: cd backend && cargo fmt
      stage_fixed: true

    # Rust リンター
    rust-clippy:
      glob: 'backend/**/*.rs'
      run: cd backend && cargo clippy -- -D warnings -A dead_code

    # フロントエンド フォーマット
    frontend-format:
      glob: 'frontend/**/*.{js,ts,svelte,json,css,md}'
      run: npx --yes prettier --write {staged_files}
      stage_fixed: true

    # フロントエンド リンター（警告のみ）
    frontend-lint:
      glob: 'frontend/**/*.{js,ts,svelte}'
      exclude: 'frontend/.svelte-kit/**/*'
      run: npx --yes eslint --config frontend/eslint.config.js --max-warnings 100 {staged_files} || true

    # ルートレベルファイル フォーマット
    root-format:
      glob: '*.{js,ts,json,md,yaml,yml}'
      run: npx --yes prettier --write {staged_files}
      stage_fixed: true

    # Infrastructure TypeScript フォーマット
    infrastructure-format:
      glob: 'infrastructure/**/*.{ts,js,json,md}'
      exclude: 'infrastructure/{node_modules,cdk.out,dist,coverage}/**/*'
      run: |
        files=$(echo {staged_files} | sed 's|infrastructure/||g')
        cd infrastructure && npx prettier --write $files
      stage_fixed: true

    # Infrastructure TypeScript リンター
    infrastructure-lint:
      glob: 'infrastructure/**/*.ts'
      exclude: 'infrastructure/{node_modules,cdk.out,dist,coverage}/**/*'
      run: |
        files=$(echo {staged_files} | sed 's|infrastructure/||g')
        cd infrastructure && npx eslint $files --fix
      stage_fixed: true

pre-push:
  commands:
    # プッシュ前のテスト実行
    backend-test:
      run: cd backend && cargo test

    frontend-test:
      run: cd frontend && npm run test -- --run

    infrastructure-test:
      run: cd infrastructure && npm test

commit-msg:
  commands:
    # コミットメッセージの検証（オプション）
    commitlint:
      run: echo "Commit message validation passed"
